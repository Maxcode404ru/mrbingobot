from keyboards import *
from text_fonts_exemple import *
from states import *
import sqlite3
from io import BytesIO
import random
from functions import *
from create_bot import bot, dp
from aiogram import  types, Dispatcher

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

storage = MemoryStorage()

from aiogram.dispatcher.filters.state import State, StatesGroup

class PassBingo(StatesGroup):
    passing = State()

answers = {}
photo_fon = 0
async def send_bingo_command(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('bingo_database.db')
    cursor = conn.cursor()
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã bingo_data
    cursor.execute("SELECT id FROM bingo_data WHERE approved_bingo=?",(1,))


    ids = cursor.fetchall()
    # Convert the list of tuples to a list of integers
    ids = [id[0] for id in ids]
    # Select a random id from the list, if it's not empty
    if ids:
        # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ id –∏–∑ —Å–ø–∏—Å–∫–∞
        random_id = random.choice(ids)
    else:
        await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–Ω–≥–æ —Å –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–æ–π.')
        return


    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    cursor.execute("SELECT bingo_photo FROM bingo_data WHERE id=? ", (random_id,))

    result = cursor.fetchone()



    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if result is None:
        await message.answer('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    photo = BytesIO(result[0])
    photo.name = 'photo.jpg'
    global photo_fon
    photo_fon = photo
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ 'waiting_for_action'
    await BingoStates.waiting_for_action.set()


    # Store the selected bingo ID in the state
    async with state.proxy() as data:
        data['bingo_id'] = random_id
        data['photo'] = photo
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è number_cells –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        cursor.execute("SELECT number_cells FROM bingo_data WHERE id=?", (random_id,))
        data['number_cells'] =  cursor.fetchone()
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()


    # Send the photo
    await bot.send_photo(message.chat.id, photo=photo, reply_markup=bingo_selection_keyboard)

    # Set the state to 'waiting_for_action'
    await BingoStates.waiting_for_action.set()

async def process_bingo_action(message: types.Message, state: FSMContext):
    print('–†–ê–ë–û–¢–ê–ï–¢ !!!')
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await message.reply("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–Ω–æ–≤–ª–µ–Ω", reply_markup=menu_keyboard)
        await state.finish()
    elif message.text == "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–∏–Ω–≥–æ":

        async with state.proxy() as data:
            bingo_id = data.get('bingo_id')
        bingo_data = get_bingo_data(bingo_id)

        if bingo_data is None:
            await message.answer('–ë–∏–Ω–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        ref = f"https://t.me/{bot_username}?start={bingo_id}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π
        await message.answer(f'–ü—Ä–æ–π–¥–∏ –º–æ—ë –±–∏–Ω–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µüëá\n{ref}', reply_markup=after_share_keyboard)
        await state.finish()
    elif message.text == '‚ùå –°–ª–µ–¥—É—é—â–µ–µ –±–∏–Ω–≥–æ':
        await send_bingo_command(message, state)
    elif message.text == '‚úÖ –ü—Ä–æ–π—Ç–∏ –±–∏–Ω–≥–æ':
        # Get the selected bingo data
        async with state.proxy() as data:
            bingo_id = data.get('bingo_id')
        text_cells = get_bingo_data(bingo_id)



        if text_cells is None:
            await message.answer('Bingo data not found.')
            return

        # Store the bingo data in the state
        async with state.proxy() as data:
            data['text_cells'] = text_cells
            data['current_question'] = 0

        # Reset the global answers dictionary for each game of bingo
        global answers
        answers = {}

        # Set the state to 'passing'
        await PassBingo.passing.set()

        # Ask the next question
        question_text, current_question = await ask_next_question(message, state)

async def process_answer(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await message.reply("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–Ω–æ–≤–ª–µ–Ω", reply_markup=menu_keyboard)
        await state.finish()
    async with state.proxy() as data:
        if 'current_question' not in data:
                #await message.reply("–ë–∏–Ω–≥–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.", reply_markup=menu_keyboard)
                await state.finish()
                return
    async with state.proxy() as data:
        current_question = data['current_question']  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        text_cells = data['text_cells']  # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —è—á–µ–π–∫–∏
        number_cells = data['number_cells'][0]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫
        photo = data['photo']  # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('temp_image.jpg', 'wb') as f:
        f.write(photo.getvalue())

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Ä–∏—Å—É–µ–º –Ω–∞ –Ω–µ–º
    img = Image.open('temp_image.jpg')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (RGBA), –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
    if img.mode != 'RGBA':
        img = img.convert('RGBA')

    draw = ImageDraw.Draw(img)

    if message.text == '‚úÖ':
        answers[current_question] = True
        text_cells[current_question] = '‚úÖ'

        if number_cells == 5:
            print(number_cells)
            cell_size_x = 150 # –®–∏—Ä–∏–Ω–∞
            cell_size_y = 150 # –í—ã—Å–æ—Ç–∞
            board_offset_x = 150
            board_offset_y = 250
            cell_padding = 10 # –û—Ç—Å—Ç—É–ø –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        if number_cells == 4 or number_cells == '4':
            print(number_cells)
            cell_size_x = 180
            cell_size_y = 180
            board_offset_x = 150
            board_offset_y = 250
            cell_padding = 20 # –û—Ç—Å—Ç—É–ø –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        if number_cells == 3:
            print(number_cells)
            cell_size_x = 250
            cell_size_y = 250
            board_offset_x = 150
            board_offset_y = 250
            cell_padding = 30 # –û—Ç—Å—Ç—É–ø –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤


        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–æ–º
        cell_x = current_question % number_cells
        cell_y = current_question // number_cells
        x1 = cell_x * (cell_size_x + cell_padding) + board_offset_x
        y1 = cell_y * (cell_size_y + cell_padding) + board_offset_y
        x2 = x1 + cell_size_x
        y2 = y1 + cell_size_y
        cell_position = (x1, y1, x2, y2)
        print('–í–´–ß–ò–°–õ–Ø–ï–ú')
        print(cell_padding)


        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ç–æ, –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
        photo = Image.open('photo\photo_putty.png')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (RGBA), –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
        if photo.mode != 'RGBA':
            photo = photo.convert('RGBA')

        photo = photo.resize((cell_size_x, cell_size_y))

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª —Å –Ω—É–∂–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é (128 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 50% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏)
        new_alpha = Image.new('L', photo.size, 128)

        # –ó–∞–º–µ–Ω—è–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª —Ñ–æ—Ç–æ –Ω–∞ –Ω–æ–≤—ã–π
        photo.putalpha(new_alpha)

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img.paste(photo, cell_position, mask=new_alpha)


    elif message.text == '‚ùå':
        answers[current_question] = False
        text_cells[current_question] = '‚ùå'

    else:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞')
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç BytesIO
    new_photo_bytes = BytesIO()
    img.save(new_photo_bytes, 'PNG')
    new_photo_bytes.seek(0)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data['photo'] = new_photo_bytes

    if data['current_question'] == len(data['text_cells']) - 1:
        # –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        yes_count = sum(value for value in answers.values() if value == True)
        yes_count = yes_count * 100 // len(data['text_cells'])
        await bot.send_photo(message.chat.id, photo=data['photo'], caption=f'–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç <b>{yes_count}</b> % –±–∏–Ω–≥–æ –ø–æ–ø–æ–¥–∞–Ω–∏–π!', reply_markup=menu_keyboard)

        await state.finish()
    else:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        async with state.proxy() as data:
            data['current_question'] += 1

        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        question_text, current_question = await ask_next_question(message, state)


async def ask_next_question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_question = data['current_question']
        text_cells = data['text_cells']

    # Ask the next question
    question_text = text_cells[current_question]

    # Send the photo
    await bot.send_photo(message.chat.id, photo=data['photo'], caption=f'–í–æ–ø—Ä–æ—Å {current_question + 1}: <b>{question_text}</b>\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ–π ‚úÖ –∏–ª–∏ ‚ùå', reply_markup=bingo_passing_keyboard)

    return question_text, current_question



async def send_bingo_my_command(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('bingo_database.db')
    cursor = conn.cursor()
    _user_chat_id = message.chat.id
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã bingo_data
    cursor.execute("SELECT id FROM bingo_data WHERE chat_id=?", (_user_chat_id,))



    ids = cursor.fetchall()
    # Convert the list of tuples to a list of integers
    ids = [id[0] for id in ids]
    # Select a random id from the list, if it's not empty
    if ids:
        # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ id –∏–∑ —Å–ø–∏—Å–∫–∞
        random_id = random.choice(ids)
    else:
        await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–Ω–≥–æ —Å –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–æ–π.')
        return


    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    cursor.execute("SELECT bingo_photo FROM bingo_data WHERE id=? ", (random_id,))

    result = cursor.fetchone()



    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if result is None:
        await message.answer('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    photo = BytesIO(result[0])
    photo.name = 'photo.jpg'
    global photo_fon
    photo_fon = photo
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ 'waiting_for_action'
    await BingoStates.waiting_for_action.set()


    # Store the selected bingo ID in the state
    async with state.proxy() as data:
        data['bingo_id'] = random_id
        data['photo'] = photo
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è number_cells –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        cursor.execute("SELECT number_cells FROM bingo_data WHERE id=?", (random_id,))
        data['number_cells'] =  cursor.fetchone()
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()

    # Send the photo
    await bot.send_photo(message.chat.id, photo=photo, reply_markup=bingo_my_selection_keyboard)

    # Set the state to 'waiting_for_action'
    await BingoStates.waiting_for_action.set()

async def process_my_bingo_action(message: types.Message, state: FSMContext):

    if message.text == 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–∏–Ω–≥–æ':
        async with state.proxy() as data:
                bingo_id = data.get('bingo_id')
        bingo_data = get_bingo_data(bingo_id)
        if bingo_data is None:
            await message.answer('–ë–∏–Ω–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        ref = f"https://t.me/{bot_username}?start={bingo_id}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π
        await message.answer(f'–ü—Ä–æ–π–¥–∏ –º–æ—ë –±–∏–Ω–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µüëá\n{ref}', reply_markup=after_share_keyboard)
        await state.finish()
    elif message.text == '‚ùå –°–ª–µ–¥—É—é—â–µ–µ –±–∏–Ω–≥–æ' or message.text == '–°–ª–µ–¥—É—é—â–µ–µ –±–∏–Ω–≥–æ':
        print('–†–ê–ë–û–¢–ê–ï–¢ !!!')
        await send_bingo_my_command(message, state)
    elif message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
           await message.reply("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–Ω–æ–≤–ª–µ–Ω", reply_markup=menu_keyboard)
           await state.finish()

    elif message.text == '‚úÖ –ü—Ä–æ–π—Ç–∏ –±–∏–Ω–≥–æ':
        # Get the selected bingo data
        async with state.proxy() as data:
            bingo_id = data.get('bingo_id')
        text_cells = get_bingo_data(bingo_id)

        if text_cells is None:
            await message.answer('Bingo data not found.')
            return

        # Store the bingo data in the state
        async with state.proxy() as data:
            data['text_cells'] = text_cells
            data['current_question'] = 0

        # Reset the global answers dictionary for each game of bingo
        global answers
        answers = {}

        # Set the state to 'passing'
        await PassBingo.passing.set()

        # Ask the next question
        question_text, current_question = await ask_next_question(message, state)

        # –ó–∞–º–µ–Ω–∏—Ç–µ 1 –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω—É–∂–Ω–æ–≥–æ –±–∏–Ω–≥–æ

async def process_my_answer(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await message.reply("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–Ω–æ–≤–ª–µ–Ω", reply_markup=menu_keyboard)
        await state.finish()
    async with state.proxy() as data:
        if 'current_question' not in data:
                #await message.reply("–ë–∏–Ω–≥–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.", reply_markup=menu_keyboard)
                await state.finish()
                return
    async with state.proxy() as data:
        current_question = data['current_question']  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        text_cells = data['text_cells']  # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —è—á–µ–π–∫–∏
        number_cells = data['number_cells'][0]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫
        photo = data['photo']  # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('temp_image.jpg', 'wb') as f:
        f.write(photo.getvalue())

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Ä–∏—Å—É–µ–º –Ω–∞ –Ω–µ–º
    img = Image.open('temp_image.jpg')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (RGBA), –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
    if img.mode != 'RGBA':
        img = img.convert('RGBA')

    draw = ImageDraw.Draw(img)

    if message.text == '‚úÖ':
        answers[current_question] = True
        text_cells[current_question] = '‚úÖ'

        if number_cells == 5:
            print(number_cells)
            cell_size_x = 150 # –®–∏—Ä–∏–Ω–∞
            cell_size_y = 150 # –í—ã—Å–æ—Ç–∞
            board_offset_x = 150
            board_offset_y = 250
            cell_padding = 10 # –û—Ç—Å—Ç—É–ø –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        if number_cells == 4 or number_cells == '4':
            print(number_cells)
            cell_size_x = 180
            cell_size_y = 180
            board_offset_x = 150
            board_offset_y = 250
            cell_padding = 20 # –û—Ç—Å—Ç—É–ø –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        if number_cells == 3:
            print(number_cells)
            cell_size_x = 250
            cell_size_y = 250
            board_offset_x = 150
            board_offset_y = 250
            cell_padding = 30 # –û—Ç—Å—Ç—É–ø –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤


        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–æ–º
        cell_x = current_question % number_cells
        cell_y = current_question // number_cells
        x1 = cell_x * (cell_size_x + cell_padding) + board_offset_x
        y1 = cell_y * (cell_size_y + cell_padding) + board_offset_y
        x2 = x1 + cell_size_x
        y2 = y1 + cell_size_y
        cell_position = (x1, y1, x2, y2)
        print('–í–´–ß–ò–°–õ–Ø–ï–ú')
        print(cell_padding)


        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ç–æ, –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
        photo = Image.open('photo\photo_putty.png')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (RGBA), –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
        if photo.mode != 'RGBA':
            photo = photo.convert('RGBA')

        photo = photo.resize((cell_size_x, cell_size_y))

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª —Å –Ω—É–∂–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é (128 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 50% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏)
        new_alpha = Image.new('L', photo.size, 128)

        # –ó–∞–º–µ–Ω—è–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª —Ñ–æ—Ç–æ –Ω–∞ –Ω–æ–≤—ã–π
        photo.putalpha(new_alpha)

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img.paste(photo, cell_position, mask=new_alpha)


    elif message.text == '‚ùå':
        answers[current_question] = False
        text_cells[current_question] = '‚ùå'

    else:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞')
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç BytesIO
    new_photo_bytes = BytesIO()
    img.save(new_photo_bytes, 'PNG')
    new_photo_bytes.seek(0)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data['photo'] = new_photo_bytes

    if data['current_question'] == len(data['text_cells']) - 1:
        # –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        yes_count = sum(value for value in answers.values() if value == True)
        yes_count = yes_count * 100 // len(data['text_cells'])
        await bot.send_photo(message.chat.id, photo=data['photo'], caption=f'–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç <b>{yes_count}</b> % –±–∏–Ω–≥–æ –ø–æ–ø–æ–¥–∞–Ω–∏–π!', reply_markup=menu_keyboard)

        await state.finish()
    else:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        async with state.proxy() as data:
            data['current_question'] += 1

        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        question_text, current_question = await ask_next_question_my(message, state)

async def ask_next_question_my(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_question = data['current_question']
        text_cells = data['text_cells']

    # Ask the next question
    question_text = text_cells[current_question]

    # Send the photo
    await bot.send_photo(message.chat.id, photo=data['photo'], caption=f'–í–æ–ø—Ä–æ—Å {current_question + 1}: <b>{question_text}</b>\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ–π ‚úÖ –∏–ª–∏ ‚ùå', reply_markup=bingo_passing_keyboard)

    return question_text, current_question


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–∏–Ω–≥–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –±–∏–Ω–≥–æ






#@dp.message_handler(text=['‚ù§Ô∏èPRO-–∞–∫–∫–∞—É–Ω—Ç'])
#async def send_pro(message: types.Message):
#    await message.reply("‚ú® –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ –æ—Å–æ–±—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!", reply_markup=menu_keyboard)
#@dp.message_handler(text=['üë§–ú–æ–∏ –±–∏–Ω–≥–æ', '/my_bingo'])
async def send_my_bingo_command(message: types.Message):
    _chat_id = message.chat.id
    conn = sqlite3.connect('bingo_database.db')
    cursor = conn.cursor()
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
    cursor.execute("SELECT name_bingo FROM bingo_data WHERE chat_id=?", (_chat_id,))
    names = cursor.fetchall()
    if not names:
        names = [row[0] for row in names]
        names = format_text_array(names)
        await message.reply(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.first_name}\n\n–¢–≤–æ–∏ –±–∏–Ω–≥–æ: —É —Ç–µ–±—è –Ω–µ—Ç –±–∏–Ω–≥–æ ", reply_markup=menu_keyboard)
        await message.reply("/new_bingo - —Å–æ–∑–¥–∞–π —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –±–∏–Ω–≥–æ!‚ú®", reply_markup=menu_keyboard)
    else:
        names = [row[0] for row in names]
        names = format_text_array(names)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)


        markup.add("–ü—Ä–æ–π—Ç–∏ –º–æ–∏ –±–∏–Ω–≥–æ")
        markup.add("–ú–µ–Ω—é")
        await message.reply(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.first_name}\n\n–¢–≤–æ–∏ –±–∏–Ω–≥–æ: {names}  ", reply_markup=markup)



def register_message_additional_handlers(dp: Dispatcher):
    dp.register_message_handler(send_bingo_command, text=['üåü –ë–∏–Ω–≥–æ', '/bingo', "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä"], state=None)
    dp.register_message_handler(process_bingo_action, state=BingoStates.waiting_for_action)
    dp.register_message_handler(process_answer, state=PassBingo.passing)
    dp.register_message_handler(send_my_bingo_command, text=['üë§ –ú–æ–∏ –±–∏–Ω–≥–æ', '/my_bingo'])
    dp.register_message_handler(send_bingo_my_command, text=['–ü—Ä–æ–π—Ç–∏ –º–æ–∏ –±–∏–Ω–≥–æ'], state=None)
    dp.register_message_handler(process_my_bingo_action, state=BingoStates.waiting_for_action)
    dp.register_message_handler(process_my_answer, state=PassBingo.passing)
    #dp.register_message_handler(send_pro, text=['‚ù§Ô∏èPRO-–∞–∫–∫–∞—É–Ω—Ç'])


# 1. –¥–æ–±–∞–≤—Ç—å –∫–Ω–æ–ø–∫—É - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–∏–Ω–≥–æ
# 2. —Å–¥–µ–ª–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–∫–∏ –∫–æ—Ç–æ—Ä—ã–π –∞—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É - –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—ã–ª–∫–æ–π
# 3. –æ—Ç–∫—Ä—ã—Ç–∏–µ –±–∏–Ω–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ, –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –±–∏–Ω–≥–æ