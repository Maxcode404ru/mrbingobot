
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from keyboards import *
from create_bingo import creature_new_bingo
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from text_fonts_exemple import *
from states import *
import sqlite3
# –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –±–∞–π—Ç–æ–≤—ã–µ –æ–±—å–µ–∫—Ç—ã
import pickle
from io import BytesIO
from aiogram.types import InputFile
import re
from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardRemove
import random
from functions import *
import os # –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
from create_bot import bot, dp

def is_hex_color(color):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ü–≤–µ—Ç
    pattern = re.compile(r'^#(?:[0-9a-fA-F]{3}){1,2}$')
    return bool(pattern.match(color))
def is_const_color(color):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ü–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
    if color == "brown" or color == "pink" or color ==  "purple"or color == 'black':
        return True
    else:
        return False

# –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î
conn = sqlite3.connect('bingo_database.db')
cursor = conn.cursor()


#dp = Dispatcher( bot, storage=storage)


cursor.execute('''CREATE TABLE IF NOT EXISTS bingo_data
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name_user,
                    number_cells INTEGER,
                    background_theme TEXT,
                    background_theme_photo BLOB,
                    color_palette TEXT,
                    two_colors TEXT,
                    color_selection TEXT,
                    name_bingo TEXT,
                    font TEXT,
                    text_cells TEXT,
                    approved_bingo,
                    chat_id)''')
conn.commit()


@dp.message_handler(text=['üÜï –°–æ–∑–¥–∞—Ç—å –±–∏–Ω–≥–æ','/new_bingo', ])
async def new_bingo(message: types.Message):

    await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫")
    await Form.number_cells.set()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("3x3", "4x4", "5x5")
    markup.add("–ù–∞–∑–∞–¥")

    await message.answer("–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π", reply_markup=markup)

@dp.message_handler(state=Form.number_cells)
async def get_number_cells(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥': # –°–î–ï–õ–ê–¢–¨ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–¢–û–†–´–ô –†–ï–ê–ì–ò–†–£–ï–¢ –ù–ê –ß–ò–°–õ–ê –ö–†–û–ú–ï 3 4 5
        await state.finish()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=menu_keyboard)
        return
    try:
        if message.text == '3x3' or message.text == '4x4' or message.text == '5x5':
            if message.text == '3x3':
                async with state.proxy() as data:
                    data['number_cells'] = 3
            if message.text == '4x4':
                async with state.proxy() as data:
                    data['number_cells'] = 4
            if message.text == '5x5':
                async with state.proxy() as data:
                    data['number_cells'] = 5
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add("–§–æ—Ç–æ", "–¶–≤–µ—Ç")
            markup.add("–ù–∞–∑–∞–¥")
            await message.answer("üñºÔ∏è –ö–∞–∫–æ–π —Å–¥–µ–ª–∞–µ–º —Ñ–æ–Ω?\n–ø—Ä–∏—à–ª–∏ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –ª–∏–±–æ –∂–µ –∫–∞—Ä–∏–Ω–∫—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Ñ–æ–Ω?", reply_markup=markup)
            await Form.background_theme.set()
        else:
           raise ValueError("–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 5 ")
    except ValueError:
        await message.reply("–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 5 ")
        return

@dp.message_handler(state=Form.background_theme)
async def get_background_theme(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=menu_keyboard)
        return
    try:

        async with state.proxy() as data:
            if message.text == '–§–æ—Ç–æ':
                data['background_theme'] = message.text
                await message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ñ–æ–Ω–∞", )
                await Form.background_theme_photo.set()
            elif message.text == '–¶–≤–µ—Ç':
                data['background_theme'] = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
                #markup.add("brown", "pink", "purple", 'black')
                await message.answer('üé® –í–≤–µ–¥–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞\n–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ü–≤–µ—Ç–∞ –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ\n\n–ü—Ä–∏–º–µ—Ä: #faf3dd\n\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞–ª–∏—Ç—Ä–æ–π –∏ –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ https://csscolor.ru –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "HEX –ø–∞–ª–∏—Ç—Ä–∞"', reply_markup=types.ReplyKeyboardRemove(), disable_web_page_preview=True)
                await Form.background_theme_color.set()
            else:
                raise ValueError("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ü–≤–µ—Ç.")
    except ValueError:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ü–≤–µ—Ç.")
        return

@dp.message_handler(state=Form.background_theme_photo, content_types=['photo', 'text'])
async def get_background_theme_photo(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=menu_keyboard)
        return
    try:
        if message.content_type == 'photo':
            async with state.proxy() as data:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                file_id = message.photo[-1].file_id
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram
                file = await bot.get_file(file_id)
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                file_name = f'{message.from_user.id}.png'
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
                file_path = await file.download(destination_file=f'photo/{file_name}')
                data['background_photo_name'] = file_name
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add("2 —Ü–≤–µ—Ç–∞", "1 —Ü–≤–µ—Ç")
            markup.add("–ù–∞–∑–∞–¥")
            await message.answer("üé®–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É", reply_markup=markup)
            await Form.color_palette.set()
        elif message.content_type == 'text':
            await message.reply("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        return

@dp.message_handler(state=Form.background_theme_color)
async def get_color_selection(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return
    try:
        if is_hex_color(message.text) == True or is_const_color(message.text) == True:
            async with state.proxy() as data:
                data['background_theme_color'] = message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add("2 —Ü–≤–µ—Ç–∞", "1 —Ü–≤–µ—Ç")
            markup.add("–ù–∞–∑–∞–¥")
            await message.answer("üé®–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É", reply_markup=markup)
            await Form.color_palette.set()
        else:
            raise ValueError('–í–≤–µ–¥–∏ —Ü–≤–µ—Ç –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ–π\n\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞–ª–∏—Ç—Ä–æ–π –∏ –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ https://csscolor.ru –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "HEX –ø–∞–ª–∏—Ç—Ä–∞"')
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

        await message.reply('–í–≤–µ–¥–∏ —Ü–≤–µ—Ç –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ–π\n\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞–ª–∏—Ç—Ä–æ–π –∏ –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ https://csscolor.ru –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "HEX –ø–∞–ª–∏—Ç—Ä–∞"', reply_markup=markup)
        return

@dp.message_handler(state=Form.color_palette)
async def get_color_palette(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return
    try:
        async with state.proxy() as data:
            if message.text == '2 —Ü–≤–µ—Ç–∞':
                data['color_palette'] = message.text
                await message.answer('–ü—Ä–∏—à–ª–∏ 2 —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å –ø—Ä–æ–±–µ–ª–æ–º\n–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ü–≤–µ—Ç–∞ –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ\n–ü—Ä–∏–º–µ—Ä: #faf3dd\n\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞–ª–∏—Ç—Ä–æ–π –∏ –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ https://csscolor.ru –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "HEX –ø–∞–ª–∏—Ç—Ä–∞"')
                await Form.two_colors.set()
            elif message.text == '1 —Ü–≤–µ—Ç':
                data['color_palette'] = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
                #markup.add("brown", "pink", "purple", 'black')

                markup.add("–ù–∞–∑–∞–¥")
                await message.answer('üé®–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –ª–∏–±–æ –≤–≤–µ–¥–∏ —Å–≤–æ–π!\n–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ü–≤–µ—Ç–∞ –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ\n–ü—Ä–∏–º–µ—Ä: #faf3dd\n\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞–ª–∏—Ç—Ä–æ–π –∏ –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ https://csscolor.ru –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "HEX –ø–∞–ª–∏—Ç—Ä–∞"', reply_markup=markup)
                await Form.color_selection.set()
            else:
                raise ValueError("–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ–π 2 —Ü–≤–µ—Ç–∞ –∏–ª–∏ 1 —Ü–≤–µ—Ç")
    except ValueError:
        await message.reply("–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ–π 2 —Ü–≤–µ—Ç–∞ –∏–ª–∏ 1 —Ü–≤–µ—Ç")
        return

@dp.message_handler(state=Form.two_colors)
async def get_two_colors(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return
    try:
        colors = message.text.split(', ')
        if len(colors) == 1:
            raise ValueError("–í–≤–µ–¥–∏ 2 —Ü–≤–µ—Ç–∞ –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        if (is_hex_color(colors[0]) == True or is_const_color(colors[0]) == True) and (is_hex_color(colors[1]) == True or is_const_color(colors[1]) and len(colors) == 2):
            async with state.proxy() as data:

                # –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                data['two_colors'] = pickle.dumps(message.text.split(', '))
                print(data['two_colors'])
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

                markup.add("–ù–∞–∑–∞–¥")
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–Ω–≥–æ", reply_markup=markup)
                await Form.name_bingo.set()
        else:
            raise ValueError('–í–≤–µ–¥–∏ 2 —Ü–≤–µ—Ç–∞ –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞–ª–∏—Ç—Ä–æ–π –∏ –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ https://csscolor.ru –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "HEX –ø–∞–ª–∏—Ç—Ä–∞"')
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        await message.reply('–í–≤–µ–¥–∏ 2 —Ü–≤–µ—Ç–∞ –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞–ª–∏—Ç—Ä–æ–π –∏ –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ https://csscolor.ru –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "HEX –ø–∞–ª–∏—Ç—Ä–∞"',  reply_markup=markup)
        return

@dp.message_handler(state=Form.color_selection)
async def get_color_selection(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return
    try:
        if is_hex_color(message.text) == True or is_const_color(message.text) == True:
                async with state.proxy() as data:
                    data['color_selection'] = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

                markup.add("–ù–∞–∑–∞–¥")
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–Ω–≥–æ", reply_markup=markup)
                await Form.name_bingo.set()
        else:
            raise ValueError("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å –ø—Ä–æ–±–µ–ª–æ–º")
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å –ø—Ä–æ–±–µ–ª–æ–º",  reply_markup=markup)
        return

@dp.message_handler(state=Form.name_bingo)
async def get_name_bingo(message: types.Message, state: FSMContext):
    if message.text == '/stop'or message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=menu_keyboard)
        return
    try:
        async with state.proxy() as data:
            data['name_bingo'] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

        create_text_image(message.text)
        photo = open('photo\\text_fonts_exemple.png', 'rb')
        await bot.send_photo(message.chat.id,  photo, caption='–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–Ω–≥–æ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–∞—Ö')
        markup.add("1", '2', "3", '4','5')
        markup.add("–ù–∞–∑–∞–¥")
        await message.answer("‚úçÔ∏è –í—ã–±–µ—Ä–∏ —à—Ä–∏—Ñ—Ç ", reply_markup=markup)
        await Form.font.set()
    except ValueError:
        await message.reply("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return

@dp.message_handler(state=Form.font)
async def get_font(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=menu_keyboard)
        return

    async with state.proxy() as data:
        data['font'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("–ù–∞–∑–∞–¥")
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–∞ –¥–ª—è —è—á–µ–µ–∫ –±–∏–Ω–≥–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\nüò∫ –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π!", reply_markup=markup)
    await Form.text_cells.set()

@dp.message_handler(state=Form.text_cells)
async def get_text_cells(message: types.Message, state: FSMContext):
    if message.text == '/stop' or message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=menu_keyboard)
        return
    try:
        async with state.proxy() as data:
            if (message.text.count(', ') + 1) == data['number_cells']**2:

                data['text_cells'] = message.text.split(', ')
                data['name_user'] = message.from_user.username
                data['approved_bingo'] = 0
                data['chat_id'] =  message.chat.id

                #if 'background_theme_photo' in data:
                #    with open(data['background_theme_photo'], 'rb') as file:
                #        # –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
                #        background_theme_photo =
                #else:
                #    # –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ñ–æ–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
                #    background_theme_photo = 0
                #    print('NOT background_theme_photo')
            else:
                raise ValueError("–í–≤–µ–¥–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤! \n\nE—Å–ª–∏ —Ç—ã –≤—ã–±—Ä–∞–ª 3 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ –Ω—É–∂–Ω–æ 9 —Å–ª–æ–≤, 16 –¥–ª—è 4, 25 –¥–ª—è 5")
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤! \n\nE—Å–ª–∏ —Ç—ã –≤—ã–±—Ä–∞–ª 3 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ –Ω—É–∂–Ω–æ 9 —Å–ª–æ–≤, 16 –¥–ª—è 4, 25 –¥–ª—è 5")
        return


    creature_new_bingo(data,  data['font'])
    user_id = message.from_user.id  # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    file_path = f"photo/{user_id}.png"  # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ—Ç–æ—Ä—ã–π—ã —É–¥–∞–ª–∏–º

    if os.path.exists(file_path):
        os.remove(file_path)
        print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω")

    else:
        print(f"–§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    photo = types.InputFile('photo\\checkerboard.png')

    # –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –±–∏–Ω–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQL
    if data['color_palette'] == '1 —Ü–≤–µ—Ç':
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î
        conn = sqlite3.connect('bingo_database.db')
        cursor = conn.cursor()
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–π—Ç—ã
        with open('photo\checkerboard.png', 'rb') as f:
            photo_bytes = f.read()
        cursor.execute('''INSERT INTO bingo_data
                      (name_user, number_cells, background_theme, background_theme_photo, color_palette,  color_selection, name_bingo, font, text_cells, approved_bingo, chat_id, bingo_photo)
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                   (data['name_user'],
                    data['number_cells'],
                    data['background_theme'],
                    'background_theme_photo,', # background_theme_photo,
                    data['color_palette'],
                    data['color_selection'],
                    data['name_bingo'],
                    data['font'],
                    ', '.join(data['text_cells']),
                    data['approved_bingo'],
                    data['chat_id'],
                    photo_bytes

                    ))
        # Commit the changes and close the connection
        conn.commit()
        conn.close()

    elif data['color_palette'] == '2 —Ü–≤–µ—Ç–∞':
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–π—Ç—ã
        with open('photo\checkerboard.png', 'rb') as f: ############################################################## –ò–ó–ú–ï–ù–ò–¢–¨ –ù–ê –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ó –î–ê–¢–ê
            photo_bytes = f.read()
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î
        conn = sqlite3.connect('bingo_database.db')
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO bingo_data
                      (name_user, number_cells, background_theme, background_theme_photo, color_palette, two_colors, name_bingo, font, text_cells, approved_bingo, chat_id, bingo_photo)
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                   (data['name_user'],
                    data['number_cells'],
                    data['background_theme'],
                    'background_theme_photo,', # background_theme_photo,
                    data['color_palette'],
                    data['two_colors'],
                    data['name_bingo'],
                    data['font'],
                    ', '.join(data['text_cells']),
                    data['approved_bingo'],
                    data['chat_id'],
                    photo_bytes

                    ))
        #print(data)
        # Commit the changes and close the connection
        conn.commit()
        conn.close()

    # –Ω—É–∂–µ–Ω –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫


    await bot.send_photo(message.chat.id, photo, caption='–¢–≤–æ–µ –±–∏–Ω–≥–æ —Å–æ–∑–¥–∞–Ω–æ!',reply_markup=menu_bingo_editor)
    #await bot.send_message(message.chat.id, f"–ë–∏–Ω–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {data}")
    await state.finish()


#–•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–Ω–≥–æ
def creating_bingo_handler(dp: Dispatcher):
    dp.register_message_handler(new_bingo, text=['üÜï –°–æ–∑–¥–∞—Ç—å –±–∏–Ω–≥–æ','/new_bingo', ])
    dp.register_message_handler(get_number_cells, state=Form.number_cells)
    dp.register_message_handler(get_background_theme, state=Form.number_cells)
    dp.register_message_handler(get_color_palette, state=Form.color_palette)
    dp.register_message_handler(get_two_colors, state=Form.two_colors)
    dp.register_message_handler(get_color_selection, state=Form.color_selection)

    dp.register_message_handler(get_name_bingo, state=Form.name_bingo)
    dp.register_message_handler(get_font, state=Form.font)
    dp.register_message_handler(get_text_cells, state=Form.text_cells)

""" –ü–†–û–•–û–ñ–î–ï–ù–ò–ï –ë–ò–ù–ì–û
    1. –ø–æ–ª—É—á–∏—Ç—å id –±–∏–Ω–≥–æ
    2. –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫
    3. –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –±–∏–Ω–≥–æ
    4. —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—á–∞—Ç—å —ç—Ç–∞–ø –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –±–∏–Ω–≥–æ
    5. –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–æ–ø—Ä–æ—Å –∏ —Ñ–æ—Ç–æ –±–∏–Ω–≥–æ –∞ –≤–Ω–∏–∑—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞ –Ω–µ—Ç
        –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –¥–∞ —Ç–æ —è—á–µ–π–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
    —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–µ—Ç—å—é —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫–∏–µ –±–∏–Ω–≥–æ –ø—Ä–æ—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""